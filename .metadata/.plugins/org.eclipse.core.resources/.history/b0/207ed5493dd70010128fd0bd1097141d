import com.ibm.rally.Car;
import com.ibm.rally.ICar;
import com.ibm.rally.IObject;
/**
 * This is the class that you must implement to enable your car within
 * the CodeRally track. Adding code to these methods will give your car
 * it's personality and allow it to compete.
 */
public class RallyCar extends Car {
	protected int wait;
	protected boolean fueling;
	protected static final int FUELING = -1;
	protected boolean atStation;

	/**
	 * @see com.ibm.rally.Car#getColor()
	 */
	public byte getColor() {
		return CAR_YELLOW;
	}

	/**
	 * @see com.ibm.rally.Car#initialize()
	 */
	public void initialize() {
		wait = 0;
		fueling = false;
		atStation = false;
	}
	
	public int FindGas() {
		double x = getDistanceTo(getFuelDepots()[0]);
		double y = getDistanceTo(getFuelDepots()[1]); 
		double z = getDistanceTo(getFuelDepots()[2]);
		if((x < 20) || (y < 20) || (z < 20)) {
			return FUELING;
		}
		if(x < y) {
			if(x < z) {
				return (getHeadingTo(getFuelDepots()[0]));
			} else {
				return (getHeadingTo(getFuelDepots()[2]));
			}
		} else {
			return (getHeadingTo(getFuelDepots()[1]));
		}
	}

	/**
	 * @see com.ibm.rally.Car#move(int, boolean, ICar, ICar)
	 * Put the car in reverse for a few moves if you collide with another car.
	 * Go toward the first gas depot.
	 */
	
	public void move(int lastMoveTime, boolean hitWall, ICar collidedWithCar, ICar hitBySpareTire) {
		/*
		if((collidedWithCar != null) || hitWall) {
		    wait = 10;
		}
		if(wait > 0) {
			setThrottle(MIN_THROTTLE);
			setSteeringSetting(MAX_STEER_RIGHT);
			wait--;
		} else {
			setThrottle(MAX_THROTTLE);
		*/
		if(!atStation) {
			setThrottle(80);
		}
		int h;
		if(getPreviousCheckpoint() == (getCheckpoints().length-1)) {
			h = getHeadingTo(getCheckpoints()[0]);
		} else {
			h = getHeadingTo(getCheckpoints()[getPreviousCheckpoint()+1]);
		}
		
		if(((getFuel() < 10) && (getClockTicks() < 500)) || (fueling == true)) {
			h = FindGas();
			if(h == FUELING) {
				setThrottle(0);
				atStation = true;
			}
			fueling = true;
		}
		if((getFuel() > 60) && fueling)
			fueling = false;
		/*
		if(getHeading() > h) {
			setSteeringSetting(MAX_STEER_LEFT);
		} else {
			setSteeringSetting(MAX_STEER_RIGHT);
		}
		*/
		
		int x = (getHeading() - h);
		if(x > 10) {
			x = 10;
		} else if(x < -10) {
			x = -10;
		}
		setSteeringSetting(-x);
		
	}
}