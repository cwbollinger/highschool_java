
public class WaveFront {
	
	Map2D map;
	
	
	public WaveFront(Map2D floorplan) {
		map = floorplan;
	}
	
	int platformX;
	int platformY;
	
	int canX;
	int canY;
	
	int robotX;
	int robotY;
	
	public int[][] setPath() {
		
		int left;
		int right;
		int up;
		int down;
		int center;
		
		
		
		for(int i = 0; i < Map2D.ROWS; i++) {
			for(int j = 0; j < Map2D.COLS; j++) {
				
				if(map.grid[i][j] == Map2D.PLATFORM) { //find final goal
					platformX = i;
					platformY = j;
				}
				
				if(map.grid[i][j] == Map2D.CAN) { // find can
					canX = i;
					canY = j;
				}
				if(map.grid[i][j] == Map2D.ROBOT) { // find robot
					robotX = i;
					robotY = j;
				}
			}
		}
		for(int i = 0; i < Map2D.ROWS; i++) {
			for(int j = 0; j < Map2D.COLS; j++) {
				
				left = map.grid[i-1][j]; 
				right = map.grid[i+1][j];
				up = map.grid[i][j-1];
				down = map.grid[i][j+1];
				center = map.grid[i][j];
				
				if(center == Map2D.PLATFORM) {
					map.grid[i-1][j] = setSquare(left, 5); 
					map.grid[i+1][j] = setSquare(right, 5);
					map.grid[i][j-1] = setSquare(up, 5);
					map.grid[i][j+1] = setSquare(down, 5);
				}
				else if(center == Map2D.CAN) {
					map.grid[i-1][j] = setSquare(left, 5); 
					map.grid[i+1][j] = setSquare(right, 5);
					map.grid[i][j-1] = setSquare(up, 5);
					map.grid[i][j+1] = setSquare(down, 5);
				}
				else if(center == Map2D.ROBOT){
					
				}
				
				
			}
		}
		return map.grid;
	}
	
	private int setSquare(int val, int replace) {
		switch(val) {
		case 0:
			return replace;
		case 1:
			return val;
		case 2:
			return val;
		case 3:
			return val;
		case 4:
			return val;
		default:
			return val;
		}		
	}
	
	public static void main(String[] args) {

	}
	
}
